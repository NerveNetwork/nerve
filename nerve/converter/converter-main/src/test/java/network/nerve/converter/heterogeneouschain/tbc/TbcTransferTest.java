/**
 * MIT License
 * <p>
 * Copyright (c) 2017-2018 nuls.io
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package network.nerve.converter.heterogeneouschain.tbc;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import com.neemre.btcdcli4j.core.domain.RawTransaction;
import io.nuls.core.crypto.HexUtil;
import io.nuls.core.exception.NulsException;
import io.nuls.core.parse.JSONUtils;
import io.nuls.v2.util.ListUtil;
import network.nerve.converter.btc.txdata.RechargeData;
import network.nerve.converter.heterogeneouschain.bitcoinlib.utils.BitCoinLibUtil;
import network.nerve.converter.heterogeneouschain.tbc.core.TbcWalletApi;
import network.nerve.converter.heterogeneouschain.tbc.utils.TbcSignatureUtil;
import network.nerve.converter.heterogeneouschain.tbc.utils.TbcUtil;
import network.nerve.converter.utils.ConverterUtil;
import network.nerve.converter.utils.jsonrpc.JsonRpcUtil;
import network.nerve.converter.utils.jsonrpc.RpcResult;
import org.apache.http.message.BasicHeader;
import org.bitcoinj.base.Base58;
import org.bitcoinj.base.Sha256Hash;
import org.bitcoinj.base.VarInt;
import org.bitcoinj.core.Transaction;
import org.bitcoinj.core.TransactionInput;
import org.bitcoinj.crypto.ECKey;
import org.bitcoinj.script.Script;
import org.bitcoinj.script.ScriptOpCodes;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static network.nerve.converter.heterogeneouschain.tbc.utils.TbcSignatureUtil.*;

/**
 * @author: PierreLuo
 * @date: 2024/12/10
 */
public class TbcTransferTest {

    TbcWalletApi walletApi;

    @BeforeClass
    public static void staticBe() {
        LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();
        Logger logger = context.getLogger("ROOT");
        logger.setAdditive(false);
        logger.setLevel(Level.ERROR);
    }

    @Before
    public void before() {
        walletApi = new TbcWalletApi();
    }

    @Test
    public void testTxDecode() throws Exception {
        String txJson = "{\"txid\":\"6b166934b1e22dfa7e0efb4b13bb0dbb7ca60cccaae0fca554a8b196ea46b465\",\"hash\":\"6b166934b1e22dfa7e0efb4b13bb0dbb7ca60cccaae0fca554a8b196ea46b465\",\"version\":10,\"size\":3676,\"locktime\":0,\"vin\":[{\"txid\":\"51c08c6bdb5f3e8bcaba32fcb443451b13aae2a987142c1a6aeda71995a8ca06\",\"vout\":2,\"scriptSig\":{\"asm\":\"30440220150926351434698b03352f2a5a026f16ffcf1cca146a41a8e6fe3b36e1467cd3022017a4a52f4c0898c3c9e7d899be14cc1959f34773eaa93a29a381f45ff9b60871[ALL|FORKID] 0284eda571d65e60d0797e7da5f9cff7b42e79e676500be81633c714c62d83a72e\",\"hex\":\"4730440220150926351434698b03352f2a5a026f16ffcf1cca146a41a8e6fe3b36e1467cd3022017a4a52f4c0898c3c9e7d899be14cc1959f34773eaa93a29a381f45ff9b6087141210284eda571d65e60d0797e7da5f9cff7b42e79e676500be81633c714c62d83a72e\"},\"coinbase\":\"not a coinbase\",\"sequence\":4294967295}],\"vout\":[{\"value\":0.002,\"n\":0,\"scriptPubKey\":{\"asm\":\"1 OP_PICK 3 OP_SPLIT OP_NIP 32 OP_SPLIT 32 OP_SPLIT 1 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_TOALTSTACK OP_BIN2NUM OP_TOALTSTACK OP_BIN2NUM OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_FROMALTSTACK OP_CAT 1 OP_PICK OP_TOALTSTACK OP_CAT OP_CAT OP_SHA256 OP_CAT 1 OP_PICK 36 OP_SPLIT OP_DROP OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_FROMALTSTACK OP_CAT OP_HASH256 6 OP_PUSH_META 32 OP_SPLIT OP_DROP OP_EQUALVERIFY 1 OP_PICK OP_TOALTSTACK OP_CAT OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP 32 OP_SPLIT OP_DROP 3 OP_ROLL OP_EQUALVERIFY OP_SWAP OP_FROMALTSTACK OP_DUP OP_TOALTSTACK OP_EQUAL OP_IF OP_DROP OP_ELSE 06caa89519a7ed6a1a2c1487a9e2aa131b4543b4fc32baca8b3e5fdb6b8cc05102000000 OP_EQUALVERIFY OP_ENDIF OP_DUP 1 OP_EQUAL OP_IF OP_DROP OP_DUP 0 OP_EQUAL OP_IF OP_TOALTSTACK OP_ELSE OP_DUP 25 OP_EQUALVERIFY OP_PARTIAL_HASH OP_CAT OP_TOALTSTACK OP_ENDIF OP_DUP 0 OP_EQUAL OP_IF OP_TOALTSTACK OP_ELSE 2 OP_PICK 1564 OP_EQUALVERIFY 4 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK OP_HASH160 OP_SWAP OP_TOALTSTACK OP_EQUAL 0 OP_EQUALVERIFY OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_ENDIF 2 OP_PICK 1564 OP_EQUALVERIFY OP_DUP OP_SIZE 5 OP_SUB OP_SPLIT 4654617065 OP_EQUALVERIFY 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 7 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_SWAP OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK 2 OP_PICK 1564 OP_EQUALVERIFY OP_DUP OP_SIZE 5 OP_SUB OP_SPLIT 4654617065 OP_EQUALVERIFY 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 8 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 8 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_TOALTSTACK OP_SWAP OP_TOALTSTACK 6 OP_PICK OP_BIN2NUM OP_DUP 1000000 OP_BIN2NUM OP_GREATERTHANOREQUAL 1 OP_EQUALVERIFY OP_FROMALTSTACK OP_2DUP OP_2DUP OP_GREATERTHAN OP_NOTIF OP_SWAP OP_ENDIF OP_DIV 100000000 OP_BIN2NUM OP_LESSTHANOREQUAL 1 OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_2DUP OP_SHA256 OP_CAT OP_TOALTSTACK 3 OP_PICK 3 OP_PICK OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_SHA256 7 OP_PUSH_META OP_EQUALVERIFY OP_NIP 2 OP_ROLL OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 3 OP_ROLL OP_TOALTSTACK 3 OP_ROLL OP_DUP OP_HASH160 OP_TOALTSTACK 8 OP_ROLL OP_EQUALVERIFY 5 OP_ROLL OP_DUP OP_TOALTSTACK OP_2DUP OP_2DUP OP_ADD OP_TOALTSTACK OP_DIV OP_DUP 0 OP_EQUAL OP_NOTIF OP_DUP 10 OP_LESSTHAN OP_IF OP_TOALTSTACK OP_MOD 0 OP_EQUALVERIFY OP_ELSE OP_TOALTSTACK OP_2DROP OP_ENDIF OP_FROMALTSTACK OP_2DUP OP_DIV 5 OP_PICK OP_EQUALVERIFY OP_SWAP 4 OP_ROLL OP_ADD OP_TOALTSTACK OP_2DUP OP_DIV 3 OP_PICK OP_EQUALVERIFY OP_DROP OP_SWAP OP_SUB OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DROP OP_ELSE OP_DROP OP_2DROP 3 OP_ROLL OP_ADD OP_FROMALTSTACK OP_FROMALTSTACK 4 OP_ROLL OP_SUB OP_SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK 3 OP_ROLL OP_DROP OP_ENDIF 3 OP_ROLL OP_SIZE 5 OP_SUB OP_SPLIT 4e54617065 OP_EQUALVERIFY 68 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM 3 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM 2 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM OP_EQUALVERIFY OP_DUP OP_SHA256 5 OP_PUSH_META OP_EQUALVERIFY OP_TOALTSTACK OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 5 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK 5 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL 0 OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 5 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK 5 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL 0 OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 5 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK 5 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL 0 OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 5 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK 5 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL 0 OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 5 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK 5 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL 0 OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF 1 OP_EQUALVERIFY OP_ELSE OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_DUP OP_SHA256 5 OP_PUSH_META OP_EQUALVERIFY OP_TOALTSTACK 0 OP_TOALTSTACK OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUAL OP_IF OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK 5 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_ELSE OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 3 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUAL OP_IF OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK 5 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_ELSE OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 3 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUAL OP_IF OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK 5 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_ELSE OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 3 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUAL OP_IF OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK 5 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_ELSE OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 3 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUAL OP_IF OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK 5 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_ELSE OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 3 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF 1 OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_DROP OP_TOALTSTACK OP_DUP 0 OP_EQUAL OP_IF OP_TOALTSTACK OP_ELSE OP_DUP 25 OP_EQUALVERIFY OP_PARTIAL_HASH OP_CAT OP_TOALTSTACK OP_ENDIF OP_DUP 0 OP_EQUAL OP_IF OP_DROP OP_ELSE 2 OP_PICK 1564 OP_EQUALVERIFY 4 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK OP_HASH160 3 OP_ROLL OP_EQUALVERIFY 7 OP_PICK OP_BIN2NUM OP_SUB OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_ENDIF OP_DUP 0 OP_EQUAL OP_IF OP_DROP OP_ELSE 2 OP_PICK 1564 OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_ENDIF 2 OP_PICK 1564 OP_EQUALVERIFY OP_DUP OP_SIZE 5 OP_SUB OP_SPLIT 4654617065 OP_EQUALVERIFY OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 7 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 6 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP 759d6677091e973b9e9d99f19c68fbf43e3f05f9 OP_EQUALVERIFY 2 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_DUP 1000000 OP_BIN2NUM OP_GREATERTHANOREQUAL 1 OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_DUP 25 OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK 5 OP_PICK OP_BIN2NUM OP_DUP OP_TOALTSTACK OP_SUB 0 OP_EQUALVERIFY OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_CAT OP_TOALTSTACK 2 OP_PICK 1564 OP_EQUALVERIFY OP_DUP OP_SIZE 5 OP_SUB OP_SPLIT 4654617065 OP_EQUALVERIFY OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 8 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK 2 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_2DUP OP_2DUP OP_GREATERTHAN OP_NOTIF OP_SWAP OP_ENDIF OP_DIV 100000000 OP_BIN2NUM OP_LESSTHANOREQUAL 1 OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_2DUP OP_SHA256 OP_CAT OP_TOALTSTACK 3 OP_PICK 3 OP_PICK OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_SHA256 7 OP_PUSH_META OP_EQUALVERIFY OP_NIP 2 OP_ROLL OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 5 OP_ROLL OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 5 OP_ROLL OP_2DUP OP_2DUP OP_SUB OP_TOALTSTACK OP_DIV OP_DUP 10 OP_LESSTHAN OP_IF OP_TOALTSTACK OP_MOD 0 OP_EQUALVERIFY OP_ELSE OP_TOALTSTACK OP_2DROP OP_ENDIF OP_FROMALTSTACK OP_2DUP OP_DIV 5 OP_PICK OP_EQUALVERIFY OP_SWAP 4 OP_ROLL OP_SUB OP_TOALTSTACK OP_2DUP OP_DIV 3 OP_PICK OP_EQUALVERIFY OP_DROP OP_SWAP OP_ADD OP_FROMALTSTACK OP_FROMALTSTACK 3 OP_ROLL OP_SIZE 5 OP_SUB OP_SPLIT 4e54617065 OP_EQUALVERIFY 68 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM 3 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM 2 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM OP_EQUALVERIFY OP_ELSE OP_DUP 3 OP_EQUAL OP_IF OP_DROP OP_DUP OP_SHA256 5 OP_PUSH_META OP_EQUALVERIFY 40 OP_SPLIT OP_NIP OP_FROMALTSTACK OP_FROMALTSTACK OP_DROP OP_TOALTSTACK OP_TOALTSTACK OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT 0 OP_TOALTSTACK OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 8 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 8 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 8 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 8 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 8 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 8 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 8 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 8 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF 1 OP_EQUALVERIFY OP_FROMALTSTACK OP_DROP OP_DUP 0 OP_EQUAL OP_IF OP_TOALTSTACK OP_ELSE OP_DUP 25 OP_EQUALVERIFY OP_PARTIAL_HASH OP_CAT OP_TOALTSTACK OP_ENDIF 2 OP_PICK 1564 OP_EQUALVERIFY OP_DUP OP_SIZE 5 OP_SUB OP_SPLIT 4654617065 OP_EQUALVERIFY OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 7 OP_PICK OP_BIN2NUM OP_2DUP OP_LESSTHAN 1 OP_EQUALVERIFY OP_SWAP OP_SUB OP_DUP 1000000 OP_BIN2NUM OP_GREATERTHANOREQUAL 1 OP_EQUALVERIFY OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK 2 OP_PICK 1564 OP_EQUALVERIFY OP_DUP OP_SIZE 5 OP_SUB OP_SPLIT 4654617065 OP_EQUALVERIFY OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 7 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 2 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_2DUP OP_SHA256 OP_CAT OP_TOALTSTACK 3 OP_PICK 3 OP_PICK OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_SHA256 7 OP_PUSH_META OP_EQUALVERIFY OP_NIP 2 OP_ROLL OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_2DUP OP_2DUP OP_GREATERTHAN OP_NOTIF OP_SWAP OP_ENDIF OP_DIV 100000000 OP_BIN2NUM OP_LESSTHANOREQUAL 1 OP_EQUALVERIFY OP_FROMALTSTACK 4 OP_ROLL OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_2DUP OP_MUL OP_TOALTSTACK 4 OP_ROLL OP_ADD OP_TOALTSTACK 2 OP_ROLL OP_SUB OP_FROMALTSTACK 3 OP_ROLL OP_SIZE 5 OP_SUB OP_SPLIT 4e54617065 OP_EQUALVERIFY 68 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_2DUP OP_FROMALTSTACK OP_SWAP OP_DIV OP_EQUALVERIFY 4 OP_ROLL OP_EQUALVERIFY 2 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM OP_EQUALVERIFY OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 7 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 7 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL 0 OP_EQUALVERIFY 0 0 OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 9 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 9 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL OP_IF 9 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK 3 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ELSE OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 9 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 9 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL OP_IF 9 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK 3 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ELSE OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 9 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 9 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL OP_IF 9 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK 3 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ELSE OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 25 OP_EQUAL OP_IF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_ELSE OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 9 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 9 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUAL OP_IF 9 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK 3 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ELSE OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_ENDIF OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK 40 OP_SPLIT OP_TOALTSTACK 32 OP_SPLIT OP_DROP OP_EQUALVERIFY OP_ENDIF 1 OP_EQUALVERIFY OP_FROMALTSTACK OP_DROP OP_DUP 0 OP_EQUAL OP_IF OP_TOALTSTACK OP_ELSE OP_DUP 25 OP_EQUALVERIFY OP_PARTIAL_HASH OP_CAT OP_TOALTSTACK OP_ENDIF OP_DUP 0 OP_EQUAL OP_IF OP_DROP OP_ELSE 2 OP_PICK 1564 OP_EQUALVERIFY OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_ENDIF 2 OP_PICK 1564 OP_EQUALVERIFY 4 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 9 OP_PICK OP_EQUALVERIFY OP_DUP OP_TOALTSTACK OP_HASH160 4 OP_ROLL OP_EQUALVERIFY 8 OP_PICK OP_BIN2NUM OP_SUB OP_TOALTSTACK 2 OP_PICK 3 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_SWAP OP_BIN2NUM OP_ADD OP_2DUP OP_LESSTHAN 1 OP_EQUALVERIFY OP_SWAP OP_SUB OP_TOALTSTACK OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_TOALTSTACK OP_DUP 25 OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_SWAP OP_TOALTSTACK 5 OP_PICK OP_BIN2NUM OP_DUP OP_TOALTSTACK OP_DUP 1000000 OP_BIN2NUM OP_GREATERTHANOREQUAL 1 OP_EQUALVERIFY OP_SUB 0 OP_EQUALVERIFY OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_CAT OP_TOALTSTACK OP_2DUP OP_SHA256 OP_CAT OP_TOALTSTACK 3 OP_PICK 3 OP_PICK OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_SHA256 7 OP_PUSH_META OP_EQUALVERIFY OP_NIP 2 OP_ROLL OP_DROP OP_FROMALTSTACK OP_FROMALTSTACK OP_2DUP OP_2DUP OP_GREATERTHAN OP_NOTIF OP_SWAP OP_ENDIF OP_DIV 100000000 OP_BIN2NUM OP_LESSTHANOREQUAL 1 OP_EQUALVERIFY OP_FROMALTSTACK 4 OP_ROLL OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_2DUP OP_MUL OP_TOALTSTACK 4 OP_ROLL OP_SUB OP_TOALTSTACK 2 OP_ROLL OP_ADD OP_FROMALTSTACK 3 OP_ROLL OP_SIZE 5 OP_SUB OP_SPLIT 4e54617065 OP_EQUALVERIFY 68 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_BIN2NUM OP_2DUP OP_FROMALTSTACK OP_SWAP OP_DIV OP_EQUALVERIFY 4 OP_ROLL OP_EQUALVERIFY 2 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM OP_EQUALVERIFY OP_ENDIF OP_ELSE 4 OP_EQUALVERIFY OP_DUP OP_SHA256 5 OP_PUSH_META OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_DROP OP_TOALTSTACK 0 OP_TOALTSTACK OP_TOALTSTACK OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 6 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 6 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 6 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 6 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF OP_DUP 2 OP_EQUAL OP_IF OP_DROP OP_OVER 1564 OP_EQUAL OP_IF OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK 6 OP_PICK OP_EQUALVERIFY OP_TOALTSTACK 6 OP_PICK OP_BIN2NUM OP_ADD OP_TOALTSTACK OP_TOALTSTACK OP_ENDIF OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_CAT OP_FROMALTSTACK OP_CAT OP_SHA256 OP_CAT OP_CAT OP_CAT OP_HASH256 OP_FROMALTSTACK OP_SIZE 40 OP_SUB OP_SPLIT 32 OP_SPLIT OP_DROP 2 OP_ROLL OP_EQUALVERIFY OP_TOALTSTACK OP_ENDIF 1 OP_EQUALVERIFY OP_FROMALTSTACK OP_DROP OP_DUP 25 OP_EQUALVERIFY OP_PARTIAL_HASH OP_CAT OP_TOALTSTACK 2 OP_PICK 1564 OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 7 OP_PICK OP_FROMALTSTACK OP_DUP OP_TOALTSTACK OP_HASH160 7 OP_PICK 1 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_EQUALVERIFY 7 OP_PICK OP_BIN2NUM OP_EQUALVERIFY OP_TOALTSTACK OP_SHA256 OP_CAT OP_TOALTSTACK OP_PARTIAL_HASH OP_CAT OP_FROMALTSTACK OP_CAT OP_TOALTSTACK OP_2DUP OP_SHA256 OP_CAT OP_TOALTSTACK 3 OP_PICK 3 OP_PICK OP_CAT OP_FROMALTSTACK OP_FROMALTSTACK OP_CAT OP_CAT OP_SHA256 7 OP_PUSH_META OP_EQUALVERIFY OP_NIP 2 OP_ROLL OP_DROP OP_SWAP OP_FROMALTSTACK OP_EQUALVERIFY OP_FROMALTSTACK OP_FROMALTSTACK OP_FROMALTSTACK 3 OP_ROLL OP_SIZE 5 OP_SUB OP_SPLIT 4e54617065 OP_EQUALVERIFY 68 OP_SPLIT OP_NIP 8 OP_SPLIT 8 OP_SPLIT 8 OP_SPLIT OP_DROP OP_BIN2NUM 3 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM 2 OP_ROLL OP_EQUALVERIFY OP_BIN2NUM OP_EQUALVERIFY OP_ENDIF OP_ENDIF OP_ENDIF OP_CHECKSIG OP_RETURN 32436f6465\",\"hex\":\"5179537f7701207f01207f517f77587f587f587f75816b816b816b6b6b6ba87e6c7e51796b7e7ea87e517901247f756b6ba87e6c7eaa56ba01207f758851796b7e7ea87e7e7eaa6c6c7601207f75537a887c6c766b876375672406caa89519a7ed6a1a2c1487a9e2aa131b4543b4fc32baca8b3e5fdb6b8cc0510200000088687651876375760087636b6776011988bb7e6b68760087636b675279021c06885479517f7701147f756c6c766ba97c6b870088a87e6bbb7e6c6c7e7e6b685279021c0688768255947f05465461706588537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936c6c6c5779886b7c6b6ba87e6bbb7e6c6c7e7e6b5279021c0688768255947f05465461706588537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936c6c6c6c766b587988766ba95879517f7701147f75886b7c6b567981760340420f81a251886c6e6ea0647c68960400e1f50581a151886b6b6ba87e6bbb7e6c6c7e7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6c6c6c6c6c6c537a6b537a76a96b587a88557a766b6e6e936b9676008764765a9f636b970088676b6d686c6e965579887c547a936b6e96537988757c946c6c6c7567756d537a936c6c547a947c6b7c6c537a7568537a8255947f054e546170658801447f77587f587f587f7581537a8881527a88818876a855ba886b765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68518867765287637576a855ba886b006b765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b6851886c6c756b760087636b6776011988bb7e6b687600876375675279021c06885479517f7701147f756c6c6c766ba9537a88577981946b6ba87e6bbb7e6c6c7e7e6b687600876375675279021c06886c6c6c6c766b5779886b6b6ba87e6bbb7e6c6c7e7e6b685279021c0688768255947f05465461706588756c6c6c6c5779886b5679517f7701147f7514759d6677091e973b9e9d99f19c68fbf43e3f05f9885279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193760340420f81a251886b6b6ba87e6bbb7e6c6c7e7e6b760119886c6c557981766b9400886bbb7e6c7e6b5279021c0688768255947f05465461706588756c6c6c6c6c5879886b6b5279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936e6ea0647c68960400e1f50581a151886b6b6ba87e6bbb7e6c6c7e7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6c6c557a886c6c6c557a6e6e946b96765a9f636b970088676b6d686c6e965579887c547a946b6e96537988757c936c6c537a8255947f054e546170658801447f77587f587f587f7581537a8881527a88818867765387637576a855ba8801287f776c6c756b6b7578011987636bbb7e7e6c7ea87e7e7eaa6c01287f006b6b01207f7588765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f75886851886c75760087636b6776011988bb7e6b685279021c0688768255947f05465461706588756c6c6c6c766b5779886b5779816e9f51887c94760340420f81a251886b6ba87e6bbb7e6c6c7e7e6b5279021c0688768255947f05465461706588756c6c6c6c5779886b5279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936b6b6ba87e6bbb7e6c6c7e7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6e6ea0647c68960400e1f50581a151886c547a886c6c6c6e956b547a936b527a946c537a8255947f054e546170658801447f77587f587f587f75817c816e6c7c9688547a88527a888188676c6c6c766b577988766ba95779517f7701147f7587008800006b6b6b6ba87e6bbb7e7e6c6c7e7ea87e7e7eaa6c01287f6b01207f7588765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f75886851886c75760087636b6776011988bb7e6b687600876375675279021c0688a87e6bbb7e6c6c7e7e6b685279021c06885479517f7701147f756c6c6c6c6c597988766ba9547a88587981946b5279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936e9f51887c946b6ba87e6bbb7e6c6c7e7e6b760119886c6c6c7c6b557981766b760340420f81a251889400886bbb7e6c7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6e6ea0647c68960400e1f50581a151886c547a886c6c6c6e956b547a946b527a936c537a8255947f054e546170658801447f77587f587f587f75817c816e6c7c9688547a88527a8881886867548876a855ba886c6c756b006b6b765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b6851886c7576011988bb7e6b5279021c06886c6c6c6c57796c766ba95779517f7701147f7588577981886ba87e6bbb7e6c7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a757c6c886c6c6c537a8255947f054e546170658801447f77587f587f587f7581537a8881527a888188686868ac6a0532436f6465\",\"reqSigs\":null,\"type\":\"nonstandard\",\"addresses\":null}},{\"value\":0,\"n\":1,\"scriptPubKey\":{\"asm\":\"0 OP_RETURN f8035100db149c093f0281c5247262d8723453442e1bd89c9ec067955370aa478ae79b26e7b6a257f35809d9b0b2940f8b91d4e8c00033bd43b95dbaf6b84f81 000000000000000000000000000000000000000000000000 51c08c6bdb5f3e8bcaba32fcb443451b13aae2a987142c1a6aeda71995a8ca06 4e54617065\",\"hex\":\"006a40f8035100db149c093f0281c5247262d8723453442e1bd89c9ec067955370aa478ae79b26e7b6a257f35809d9b0b2940f8b91d4e8c00033bd43b95dbaf6b84f81180000000000000000000000000000000000000000000000002051c08c6bdb5f3e8bcaba32fcb443451b13aae2a987142c1a6aeda71995a8ca06054e54617065\",\"reqSigs\":null,\"type\":\"nulldata\",\"addresses\":null}},{\"value\":999.988509,\"n\":2,\"scriptPubKey\":{\"asm\":\"OP_DUP OP_HASH160 689f9922fa0f10913b4315d350d1e57a6cc8a53a OP_EQUALVERIFY OP_CHECKSIG\",\"hex\":\"76a914689f9922fa0f10913b4315d350d1e57a6cc8a53a88ac\",\"reqSigs\":1,\"type\":\"pubkeyhash\",\"addresses\":[\"1AYCU2ZrENLJCPpkkTPkFk5tuooPxBN5So\"]}}],\"hex\":\"0a0000000106caa89519a7ed6a1a2c1487a9e2aa131b4543b4fc32baca8b3e5fdb6b8cc051020000006a4730440220150926351434698b03352f2a5a026f16ffcf1cca146a41a8e6fe3b36e1467cd3022017a4a52f4c0898c3c9e7d899be14cc1959f34773eaa93a29a381f45ff9b6087141210284eda571d65e60d0797e7da5f9cff7b42e79e676500be81633c714c62d83a72effffffff03d007000000000000fd060d5179537f7701207f01207f517f77587f587f587f75816b816b816b6b6b6ba87e6c7e51796b7e7ea87e517901247f756b6ba87e6c7eaa56ba01207f758851796b7e7ea87e7e7eaa6c6c7601207f75537a887c6c766b876375672406caa89519a7ed6a1a2c1487a9e2aa131b4543b4fc32baca8b3e5fdb6b8cc0510200000088687651876375760087636b6776011988bb7e6b68760087636b675279021c06885479517f7701147f756c6c766ba97c6b870088a87e6bbb7e6c6c7e7e6b685279021c0688768255947f05465461706588537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936c6c6c5779886b7c6b6ba87e6bbb7e6c6c7e7e6b5279021c0688768255947f05465461706588537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936c6c6c6c766b587988766ba95879517f7701147f75886b7c6b567981760340420f81a251886c6e6ea0647c68960400e1f50581a151886b6b6ba87e6bbb7e6c6c7e7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6c6c6c6c6c6c537a6b537a76a96b587a88557a766b6e6e936b9676008764765a9f636b970088676b6d686c6e965579887c547a936b6e96537988757c946c6c6c7567756d537a936c6c547a947c6b7c6c537a7568537a8255947f054e546170658801447f77587f587f587f7581537a8881527a88818876a855ba886b765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c766b557988766b5579517f7701147f758700886b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68518867765287637576a855ba886b006b765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b68765287637578021c0687636c6c6c6c6c766b577987636b6b6b557981936b67766b5679886b6b6b68686bbb7e7e6c7ea87e7e7eaa6c6c820128947f01207f75537a886b6b6851886c6c756b760087636b6776011988bb7e6b687600876375675279021c06885479517f7701147f756c6c6c766ba9537a88577981946b6ba87e6bbb7e6c6c7e7e6b687600876375675279021c06886c6c6c6c766b5779886b6b6ba87e6bbb7e6c6c7e7e6b685279021c0688768255947f05465461706588756c6c6c6c5779886b5679517f7701147f7514759d6677091e973b9e9d99f19c68fbf43e3f05f9885279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193760340420f81a251886b6b6ba87e6bbb7e6c6c7e7e6b760119886c6c557981766b9400886bbb7e6c7e6b5279021c0688768255947f05465461706588756c6c6c6c6c5879886b6b5279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936e6ea0647c68960400e1f50581a151886b6b6ba87e6bbb7e6c6c7e7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6c6c557a886c6c6c557a6e6e946b96765a9f636b970088676b6d686c6e965579887c547a946b6e96537988757c936c6c537a8255947f054e546170658801447f77587f587f587f7581537a8881527a88818867765387637576a855ba8801287f776c6c756b6b7578011987636bbb7e7e6c7ea87e7e7eaa6c01287f006b6b01207f7588765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c766b5879886b587981936b6b6ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f75886851886c75760087636b6776011988bb7e6b685279021c0688768255947f05465461706588756c6c6c6c766b5779886b5779816e9f51887c94760340420f81a251886b6ba87e6bbb7e6c6c7e7e6b5279021c0688768255947f05465461706588756c6c6c6c5779886b5279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936b6b6ba87e6bbb7e6c6c7e7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6e6ea0647c68960400e1f50581a151886c547a886c6c6c6e956b547a936b527a946c537a8255947f054e546170658801447f77587f587f587f75817c816e6c7c9688547a88527a888188676c6c6c766b577988766ba95779517f7701147f7587008800006b6b6b6ba87e6bbb7e7e6c6c7e7ea87e7e7eaa6c01287f6b01207f7588765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f758868765287637578011987636bbb7e7e676c6c6c6c6c766b597988766ba95979517f7701147f758763597981936b5379537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c8193936b6b676b6b6b6b686ba87e6bbb7e7e6c7e686c7ea87e7e7eaa6c01287f6b01207f75886851886c75760087636b6776011988bb7e6b687600876375675279021c0688a87e6bbb7e6c6c7e7e6b685279021c06885479517f7701147f756c6c6c6c6c597988766ba9547a88587981946b5279537f77587f587f587f587f587f587f75817c81937c81937c81937c81937c81936e9f51887c946b6ba87e6bbb7e6c6c7e7e6b760119886c6c6c7c6b557981766b760340420f81a251889400886bbb7e6c7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a756c6c6e6ea0647c68960400e1f50581a151886c547a886c6c6c6e956b547a946b527a936c537a8255947f054e546170658801447f77587f587f587f75817c816e6c7c9688547a88527a8881886867548876a855ba886c6c756b006b6b765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b68765287637578021c0687636c6c6c6c766b5679886b567981936b6b686bbb7e7e6c7ea87e7e7eaa6c820128947f01207f75527a886b6851886c7576011988bb7e6b5279021c06886c6c6c6c57796c766ba95779517f7701147f7588577981886ba87e6bbb7e6c7e6b6ea87e6b537953797e6c6c7e7ea857ba8877527a757c6c886c6c6c537a8255947f054e546170658801447f77587f587f587f7581537a8881527a888188686868ac6a0532436f6465000000000000000083006a40f8035100db149c093f0281c5247262d8723453442e1bd89c9ec067955370aa478ae79b26e7b6a257f35809d9b0b2940f8b91d4e8c00033bd43b95dbaf6b84f81180000000000000000000000000000000000000000000000002051c08c6bdb5f3e8bcaba32fcb443451b13aae2a987142c1a6aeda71995a8ca06054e546170651d9d9a3b000000001976a914689f9922fa0f10913b4315d350d1e57a6cc8a53a88ac00000000\"}";
        RawTransaction rawTransaction = walletApi.getTransactionByHash("6b166934b1e22dfa7e0efb4b13bb0dbb7ca60cccaae0fca554a8b196ea46b465");
        System.out.println(rawTransaction);
    }

    @Test
    public void testCreateMultisigAddress() {
        // 0308784e3d4aff68a24964968877b39d22449596c1c789136a4e25e2db78198260,
        // 03e2029ddf8c0150d8a689465223cdca94a0c84cdb581e39ac13ca41d279c24ff5,
        // 02b42a0023aa38e088ffc0884d78ea638b9438362f15c610865dfbed9708347750
        List<byte[]> pubs = null;
        // FJ5buUdNQ8FBpwh3ZT2W1peVUidHRvje2m
        pubs = List.of(
                HexUtil.decode("02b42a0023aa38e088ffc0884d78ea638b9438362f15c610865dfbed9708347750"),
                HexUtil.decode("0308784e3d4aff68a24964968877b39d22449596c1c789136a4e25e2db78198260"),
                HexUtil.decode("03e2029ddf8c0150d8a689465223cdca94a0c84cdb581e39ac13ca41d279c24ff5")
        );
        /*pubs = List.of(
                HexUtil.decode("02b2ad2b3d34a375bc46a36095c8c16ce9142da988911bdabdf7314ad0b18a116f"),
                HexUtil.decode("02dcbc5523285dd50ffc8735d45c43807e88a68b860ceeb7357f0501d10e39469f"),
                HexUtil.decode("032321f8ed4e0fa66a3732d147a61713732221fc4d0c9829f94604dd8082d210ff")
        );
        //TNVTdTSPMGoSukZyzpg23r3A7AnaNyi3roSXT,TNVTdTSPV7WotsBxPc4QjbL8VLLCoQfHPXWTq,TNVTdTSPLbhQEw4hhLc2Enr5YtTheAjg8yDsV
        pubs = List.of(
                HexUtil.decode("024173f84acb3de56b3ef99894fa3b9a1fe4c48c1bdc39163c37c274cd0334ba75"),
                HexUtil.decode("02c0a82ba398612daa4133a891b3f52832114e0d3d6210348543f1872020556ded"),
                HexUtil.decode("03b77df3d540817d20d3414f920ccec61b3395e1dc1ef298194e5ff696e038edd9")
        );*/
        // 03b77df3d540817d20d3414f920ccec61b3395e1dc1ef298194e5ff696e038edd9,
        // 024173f84acb3de56b3ef99894fa3b9a1fe4c48c1bdc39163c37c274cd0334ba75,
        // 02c0a82ba398612daa4133a891b3f52832114e0d3d6210348543f1872020556ded
        String multisigAddress = TbcUtil.genMultisigAddress(2, pubs);
        System.out.println(multisigAddress);
    }

    @Test
    public void rechargeDataTest() throws NulsException {
        String hex = "0500017ab79bd5c00354e7d4f346749ad7d2c1f8bae031000000553239613735333233336266346633623534366235656163643061386563376137613233366266376239383766353133393061376361633930626231643862636631303030303030303030303030303030303030303000000000";
        RechargeData data = new RechargeData();
        data.parse(HexUtil.decode(hex), 0);
        System.out.println(data.toString());
        // 29a753233bf4f3b546b5eacd0a8ec7a7a236bf7b987f51390a7cac90bb1d8bcf
        // 100000000000000000000
    }

    @Test
    public void addrTest() {
        String pub = "222222222222222222222222222222222222222222222222222222222222222222";
        String address = TbcUtil.getBtcLegacyAddress(pub);
        System.out.println(address);
        pub = "03b77df3d540817d20d3414f920ccec61b3395e1dc1ef298194e5ff696e038edd9";
        address = TbcUtil.getBtcLegacyAddress(pub);
        System.out.println(address);
    }

    @Test
    public void testCreateMultisigAddress10() {
        List<ECKey> keys = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            keys.add(new ECKey());
        }
        keys.sort(ECKey.PUBKEY_COMPARATOR);
        keys.forEach(k -> System.out.println(k.getPrivateKeyAsHex()));
        System.out.println("------------------");
        keys.forEach(k -> System.out.println(k.getPublicKeyAsHex()));

        String multisigAddress = TbcUtil.genMultisigAddress(7,
                keys.stream().map(k -> k.getPubKey()).toList());
        System.out.println(multisigAddress);
    }

    @Test
    public void address10() {
        /*
        020c60dd7e0016e174f7ba4fc0333052bade8c890849409de7b6f3d26f0ec64528 - NERVEepb63mC8F4cwLRbkW3ATbZbtFChbRp2DD - NERVEepb63mC8F4cwLRbkW3ATbZbtFChbRp2DD - not bank
        0369865ab23a1e4f3434f85cc704723991dbec1cb9c33e93aa02ed75151dfe49c5 - NERVEepb6CY4q799Pqk3dKuxZgU68Hn8WpPdEE - NERVEepb6CY4q799Pqk3dKuxZgU68Hn8WpPdEE - not bank

        039eefe5915a253db131c5a825f03ca048e5aad257edfcd295fea3fec78609d980 - NERVEepb61YGfhhFwpTJVt9bj2scnSsVWZGXtt - NERVEepb692UnBKbUCp99XamFhVJ6vXFNYHUeC - ordinay bank(berzeck)
        029da5a7bf42be5c32bb06732160d033acefdbef6a537b717caea41a22a60706b4 - NERVEepb69pdDv3gZEZtJEmahzsHiQE6CK4xRi - NERVEepb6FQX5fGD34zpbXWD2YRRRr5QXRmapK - ordinay bank(teacher changyong)

        02a2edb535be21aa7fd4aa0748ae29e110e35783bc6a92fa7f417f3ffeeeec18cd - NERVEepb65ZajSasYsVphzZCWXZi1MDfDa9J49 - NERVEepb6bT6dAfEtY9Z4c38Khawdr4LKZNais - nerve multiSign manage bank
        03ac396ab4bc360610058d04940c879e0da57ea1b4a541b75df6989a6c3d5081c9 - NERVEepb698N2GmQkd8LqC6WnSN3k7gimAtzxE - NERVEepb6eKxoK6ZmKhhDK4oZkuXnUMxZfCta4 - nerve multiSign manage bank

        // use below 10 pubs
        028c232cfd2d3757e50cb6af2e010819a942ab231c92406170ece0846b23d323b7 - NERVEepb6ED2QAwfBdXdL7ufZ4LNmbRupyxvgb - NERVEepb6kENgUgVNdaJj9d5e947pmrZ19pmwk - nerve multiSign manage bank
        02893771a18d17e10eabb08718f7da8e10a825ee19c33c8b36b13d95375f6f4a03 - NERVEepb6Dvi5xRK5rwByAPCgF2d6bsDPuJKJ9 - NERVEepb6gVC8TBCioYHK6PPLKYk9aoXH8eGbV - nerve multiSign manage bank
        035fe7599a7b39ad69fbd243aac7cfb93055f8f0827c6b08057874877cb890b803 - NERVEepb69vD3ZaZLgeUSwSonjndMTPmBGc8n1 - NERVEepb6exLKu4eJkHCekXicn7YpDa3hzHGvt - nerve multiSign manage bank
        0308ad97a2bf08277be771fc5450b6a0fa26fbc6c1e57c402715b9135d5388594b - NERVEepb69uqMbNRufoPz6QGerCMtDG4ybizAA - NERVEepb69uqMbNRufoPz6QGerCMtDG4ybizAA - seed bank
        02db1a62c168ac3e34d30c6e6beaef0918d39d448fe2a85aed24982e7368e2414d - NERVEepb649o7fSmXPBCM4F6cAJsfPQoQSbnBB - NERVEepb649o7fSmXPBCM4F6cAJsfPQoQSbnBB - seed bank
        02ae22c8f0f43081d82fcca1eae4488992cdb0caa9c902ba7cbfa0eacc1c6312f0 - NERVEepb6Cu6CC2uYpS2pAgmaReHjgPwtNGbCC - NERVEepb6Cu6CC2uYpS2pAgmaReHjgPwtNGbCC - seed bank
        03929732b37e41a5a37b35122002c068f596432f4b9438ba4ac2a85e7dd31c3df4 - NERVEepb67XwfW4pHf33U1DuM4o4nyACTohooD - NERVEepb6BJjKQi5crP1s97HvMZNUJiopwzfUq - ordinay bank
        02ac649c3eaf32886342b7d2ed83c01c24f297de2d006ad88e36017973644e3049 - NERVEepb66GmaKLaqiFyRqsEuLNM1i1qRwTQ64 - NERVEepb6Doc1HeS13ntknsSDsJusDktdTBagN - ordinay bank
        02a28a636088973c35ca0c28498b672cb8f61802164cf6904fc83463c4722c6292 - NERVEepb6B3jKbVM8SKHsb92j22yEKwxa19akB - NERVEepb62CKawndBxG7nqb4n34ckarb7LNQki - ordinay bank
        02ac31c213b1dc1d2fd55d7751326b4f07b4a5b4ecb2ce3f214cafb7832fd211b9 - NERVEepb67bXCQ4XJxH4q2GyG9WmA5NUFuHZQx - NERVEepb6BFXG13yVCSYR3LDdP8fPathYoKzZw - ordinay bank



        */
        List<ECKey> list = new ArrayList<>();
        list.add(ECKey.fromPublicOnly(HexUtil.decode("028c232cfd2d3757e50cb6af2e010819a942ab231c92406170ece0846b23d323b7")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("02893771a18d17e10eabb08718f7da8e10a825ee19c33c8b36b13d95375f6f4a03")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("035fe7599a7b39ad69fbd243aac7cfb93055f8f0827c6b08057874877cb890b803")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("0308ad97a2bf08277be771fc5450b6a0fa26fbc6c1e57c402715b9135d5388594b")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("02db1a62c168ac3e34d30c6e6beaef0918d39d448fe2a85aed24982e7368e2414d")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("02ae22c8f0f43081d82fcca1eae4488992cdb0caa9c902ba7cbfa0eacc1c6312f0")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("03929732b37e41a5a37b35122002c068f596432f4b9438ba4ac2a85e7dd31c3df4")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("02ac649c3eaf32886342b7d2ed83c01c24f297de2d006ad88e36017973644e3049")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("02a28a636088973c35ca0c28498b672cb8f61802164cf6904fc83463c4722c6292")));
        list.add(ECKey.fromPublicOnly(HexUtil.decode("02ac31c213b1dc1d2fd55d7751326b4f07b4a5b4ecb2ce3f214cafb7832fd211b9")));

        System.out.println(TbcUtil.genMultisigAddress(6, list.stream().map(k -> k.getPubKey()).toList()));

    }

    @Test
    public void jsonRPCTest() throws Exception {
        String url = "http://tbcnode.com:8332/";
        List<BasicHeader> headers = List.of(new BasicHeader("Authorization", "Basic dGJjdXNlcjpyYW5kb21wYXNzd2Q="));
        RpcResult request = JsonRpcUtil.request(url, "getrawtransaction", ListUtil.of("dd6c8d543a54dfc9fcd1255799467e40723fffb8b64d1aa2e03e7d6cef4886eb", true), headers);
        System.out.println(JSONUtils.obj2PrettyJson(request));
    }

    @Test
    public void batchJsonRPC() throws Exception {
        List methods = List.of("getrawtransaction", "getrawtransaction");
        List params = List.of(
                List.of("dd6c8d543a54dfc9fcd1255799467e40723fffb8b64d1aa2e03e7d6cef4886eb", true),
                List.of("658474247a6c3d915730974ff46e057ac6b7600acb12f12850eb6f42156ab653", true)
        );
        String url = "http://tbcnode.com:8332";
        List<BasicHeader> headers = List.of(new BasicHeader("Authorization", "Basic dGJjdXNlcjpyYW5kb21wYXNzd2Q="));
        List list = JsonRpcUtil.batchRequest(url, methods, params, headers);
        System.out.println(JSONUtils.obj2PrettyJson(list));
    }

    @Test
    public void testParseFT() throws Exception {
        String combineScriptHex0 = "59796b51798255947f05465461706588537f587f587f587f587f587f587f7581760087646c76550128957f01287f756b756b687c81760087646c76540128957f01287f756b756b68937c81760087646c76530128957f01287f756b756b68937c81760087646c76520128957f01287f756b756b68937c81760087646c76510128957f01287f756b756b68937c81760087646c76000128957f01287f756b756b68936c756b756ba87e6c7e527952797e6b53796b6bbb7e7e6c7ea87e6ba86c7e7ea8a856ba01207f75886c517f7701147f517f758176008763755179a988ad6751885279a9886b7e6c7e7ea87e7e7ea8a87801207f7588a855ba88ad687652876375527952797e6b6bbb7e7e6c7ea87e7e7ea8a86c6c766c6c01247f75766b01207f75557a887287636c756b6b676c24cf8b1dbb90ac7c0a39517f987bbf36a2a7c78e0acdeab546b5f3f43b2353a72902000000886b6b68687652876375527952797e6b6bbb7e7e6c7ea87e7e7ea8a86c6c766c6c01207f75557a8872886b6b687652876375527952797e6b6bbb7e7e6c7ea87e7e7ea8a86c6c766c6c01207f75557a8872886b6b687652876375527952797e6b6bbb7e7e6c7ea87e7e7ea8a86c6c766c6c01207f75557a8872886b6b687652876375527952797e6b6bbb7e7e6c7ea87e7e7ea8a86c6c766c6c01207f75557a8872886b6b687652876375527952797e6b6bbb7e7e6c7ea87e7e7ea8a86c6c766c6c01207f75557a8872886b6b68765287008857886c6c7c6b6b6b76528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528763757682760143876355947f05465461706588537f7c756c765895527a7c7f587f7581760087646c6c76597959797e886b6b686c7c946b756ba87e6bbb6c7e7e6c6c6c537a6c7e6b6b6b6b67750143876352798255947f0546546170658700887568bb7e6c6c6c537a6c7e6b6b6b6b686876528700886c6c00887551886c6ca857ba877721ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff756a15b66cd0779e1be886491f67f807256c692be96468010532436f6465";
        String asm1 = "0 OP_RETURN 809698000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 6 7627107 7627107 4654617065";
        BigDecimal outputValue = new BigDecimal("0.002");
        Object[] objects = parseFTProtocol(combineScriptHex0, asm1, outputValue);
        System.out.println(Arrays.toString(objects));

        byte versionByte = (byte) ((2 << 4) | (3 & 0x0f));
        System.out.println(Base58.encodeChecked(versionByte, HexUtil.decode("2d965732caae86efc448ea4f387e271db25ae541")));
        System.out.println(Base58.encodeChecked(versionByte, HexUtil.decode("b66cd0779e1be886491f67f807256c692be96468")));
        System.out.println(Base58.encodeChecked(0, HexUtil.decode("538f89e43c185dfe243f94f334561e454d9b965f")));
        System.out.println(Base58.encodeChecked(0, HexUtil.decode("4ce9be902b43de97dadde274894cf6ebb18befba")));

    }

    @Test
    public void decodeUTXOTest() throws Exception {
        String a = "02000000";
        VarInt varInt = VarInt.ofBytes(HexUtil.decode(a), 0);
        System.out.println(varInt.intValue());
        System.out.println(varInt.longValue());
    }

    @Test
    public void getCombineHash() throws Exception {
        String addr = "FJ5buUdNQ8FBpwh3ZT2W1peVUidHRvje2m";
        System.out.println(TbcUtil.getCombineHash(addr));
        System.out.println(TbcUtil.getAddressHash(addr));
        String scriptAsm = TbcUtil.getMultisigLockScript(addr);
        System.out.println(scriptAsm);
        byte[] decodeASM = TbcUtil.decodeASM(scriptAsm);
        System.out.println(HexUtil.encode(decodeASM));
    }

    @Test
    public void signStepTest() throws Exception {
        String multiAddr = "FBeMrqQWFkhBJt6rA2yKxVWg9Jeiww76Pr";
        String scriptAsm = TbcUtil.getMultisigLockScript(multiAddr);
        System.out.println(scriptAsm);
        byte[] decodeASM = TbcUtil.decodeASM(scriptAsm);
        System.out.println(HexUtil.encode(decodeASM));
        decodeASM = Script.removeAllInstancesOfOp(decodeASM, ScriptOpCodes.OP_CODESEPARATOR);
        System.out.println(HexUtil.encode(decodeASM));

        String txHex = "0a00000001297c7483b38c067f3645eacd368693f439f1ef001d1b88559b014530b7a359840100000000ffffffff02400d0300000000001976a914268aea733ecab3ca3fb04897083d2de883d7399788ac08ac0a000000000029527c01217f01217f5279527952797e7ea9143fc8327ee3e748b925763179171ee7b8d79873668853ae00000000";
        Transaction tx = Transaction.read(ByteBuffer.wrap(HexUtil.decode(txHex)));

        byte[] preimage = TbcSignatureUtil.sighashPreimageForForkId(
                tx,
                65,
                0,
                decodeASM,
                BigInteger.valueOf(899700),
                null
        );
        if (Arrays.equals(preimage, SIGHASH_SINGLE_BUG)) {
            throw new RuntimeException("SIGHASH_SINGLE_BUG");
        }
        System.out.println(HexUtil.encode(preimage));
        byte[] hashBuf = Sha256Hash.hashTwice(preimage);
        System.out.println(HexUtil.encode(hashBuf));
        ECKey privKey = ECKey.fromPrivate(HexUtil.decode("30002e81d449f16b69bc3e06918ff6ff088863edef8a0ba3d9b06fe5d02744d7"));
        ECKey.ECDSASignature ecdsaSignature = privKey.sign(Sha256Hash.wrap(hashBuf));
        System.out.println(HexUtil.encode(ecdsaSignature.encodeToDER()));

        //sig1 [
        //        '30450221008fe36663069fe3414bcbbe2edec40de48810ddbdf57a6e6e5456c03da3510570022018a157850cb6e70fc3ba580dba9ea6fa9ccdd1711a56e223dce28802c693107041'
        //        ]
        //sig2 [
        //        '3044022006d7222ba4dcdd8662e6cb66dccdeea02ec047d4acdcf2dd853053203ff9cc7702204be98408a8543c50edc1d3f2849074362550d56f23bd147570e03ce5663f36b641'
        //        ]
    }


    @Test
    public void multiSignTxTest() throws Exception {
        String _a = "30002e81d449f16b69bc3e06918ff6ff088863edef8a0ba3d9b06fe5d02744d7";
        String _b = "ce608d31bfd260ab5a4098d45c8130fdf407753dfcd88bcb366ae8f362b0c8ba";
        String _c = "c48f55dbe619e83502be1f72c875ed616aeaab6108196f0d644d72e992f6a155";
        String multiAddr = "FBeMrqQWFkhBJt6rA2yKxVWg9Jeiww76Pr";
        String txHex = "0a00000001fb0bcfdc3fa48482a2575f461e984c9b5d0770a63acaed28dc72cb26cb151a930400000000ffffffff02400d0300000000001976a914268aea733ecab3ca3fb04897083d2de883d7399788ac187405000000000029527c01217f01217f5279527952797e7ea9143fc8327ee3e748b925763179171ee7b8d79873668853ae00000000";
        List<BigInteger> fromAmounts = List.of(BigInteger.valueOf(557700));
        List<String> listA = signMultiTBC(multiAddr, txHex, _a, fromAmounts);
        List<String> listB = signMultiTBC(multiAddr, txHex, _b, fromAmounts);
        System.out.println(Arrays.toString(listA.toArray()));
        System.out.println(Arrays.toString(listB.toArray()));
    }



    @Test
    public void multiSignFtTxTest() throws Exception {
        String _a = "30002e81d449f16b69bc3e06918ff6ff088863edef8a0ba3d9b06fe5d02744d7";
        String _b = "ce608d31bfd260ab5a4098d45c8130fdf407753dfcd88bcb366ae8f362b0c8ba";
        String _c = "c48f55dbe619e83502be1f72c875ed616aeaab6108196f0d644d72e992f6a155";
        String multiAddr = "FBeMrqQWFkhBJt6rA2yKxVWg9Jeiww76Pr";
        String txHex = "";
        List<BigInteger> fromAmounts = List.of(BigInteger.valueOf(996000));
        List<String> listA = signMultiFT(multiAddr, txHex, _a, fromAmounts);
        List<String> listB = signMultiFT(multiAddr, txHex, _b, fromAmounts);
        System.out.println(Arrays.toString(listA.toArray()));
        System.out.println(Arrays.toString(listB.toArray()));
    }

    Object[] parseFTProtocol(String combineScriptHex0, String asm1, BigDecimal outputValue) {

        // Get receiver address
        String voutCombineScript = combineScriptHex0.substring(combineScriptHex0.length() - 54, combineScriptHex0.length() - 12);
        String pubkeyHash = voutCombineScript.substring(0, voutCombineScript.length() - 2);
        System.out.println("pubkeyHash: " + pubkeyHash);// b66cd0779e1be886491f67f807256c692be96468
        String receiverAddress = Base58.encodeChecked(0, HexUtil.decode(pubkeyHash));

        // Get FT balance
        long ftBalance = 0;
        String ftBalanceTape = asm1.substring(12, 108);
        for (int i = 0; i < ftBalanceTape.length(); i += 16) {
            String segment = ftBalanceTape.substring(i, i + 16);
            segment = TbcUtil.reverseHexString(segment);
            ftBalance += Long.parseLong(segment, 16);
        }

        // Get code UTXO balance
        double codeTbcValue = outputValue.doubleValue();
        long codeTbcBalance = (long) (codeTbcValue * 1_000_000);

        //logger.info("Receiver Address: " + receiverAddress);
        //logger.info("FT Balance: " + ftBalance);
        //logger.info("Code UTXO Balance: " + codeTbcBalance);
        return new Object[]{receiverAddress, ftBalance, codeTbcBalance};
    }



}
