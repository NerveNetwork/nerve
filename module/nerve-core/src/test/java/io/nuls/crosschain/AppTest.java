package io.nuls.crosschain;

import static org.junit.Assert.assertTrue;

import io.nuls.core.crypto.HexUtil;
import io.nuls.core.parse.JSONUtils;
import io.nuls.crosschain.base.model.bo.AssetInfo;
import io.nuls.crosschain.base.model.bo.ChainInfo;
import io.nuls.crosschain.base.model.bo.LedgerAsset;
import io.nuls.crosschain.base.model.bo.txdata.RegisteredChainChangeData;
import io.nuls.ledger.constant.LedgerConstant;
import io.nuls.ledger.utils.LoggerUtil;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Unit test for simple App.
 */
public class AppTest 
{
    /**
     * Rigorous Test :-)
     */
    @Test
    public void shouldAnswerWithTrue()
    {
        assertTrue( true );
    }

    private static List<Map<String,Object>> assembleLedgerAsset(List<ChainInfo> chainInfoList) throws Exception{
        List<Map<String,Object>> ledgerAssetList = new ArrayList<>();
        for (ChainInfo chainInfo : chainInfoList){
            for (AssetInfo assetInfo : chainInfo.getAssetInfoList()){
                LedgerAsset ledgerAsset = new LedgerAsset(assetInfo, chainInfo.getChainId());
                ledgerAssetList.add(JSONUtils.json2map(JSONUtils.obj2json(ledgerAsset)));
            }
        }
        return ledgerAssetList;
    }

    @Test
    public void assetUpdateTest() throws Exception {
        String hex = "";
        RegisteredChainChangeData data = new RegisteredChainChangeData();
        data.parse(HexUtil.decode(hex), 0);
        List<Map<String, Object>> maps = assembleLedgerAsset(data.getChainInfoList());

        Map params = new HashMap();
        params.put("chainId", 9);
        params.put("assetType", 3);
        params.put("crossChainAssetList", maps);

        crossChainAssetListReg(params);

        /*ChainInfo chainInfo = data.getChainInfoList().get(0);
        List<AssetInfo> assetInfoList = chainInfo.getAssetInfoList();
        for (AssetInfo assetInfo : assetInfoList) {
            System.out.println(String.format(
                    JSONUtils.obj2json(assetInfo)
            ));
        }
        System.out.println();*/
    }

    public static void crossChainAssetListReg(Map params) {
        Map<String, Object> rtMap = new HashMap<>(3);
        try {
            System.out.println("[register] cross chain asset list");
            int chainId = Integer.parseInt(params.get("chainId").toString());
            short assetType = Short.parseShort(params.get("assetType").toString());
            List<io.nuls.ledger.model.po.LedgerAsset> saveAssetList = new ArrayList<>();
            List<String> deleteAssetKeyList = new ArrayList<>();
            List<Map<String, Object>> list = (List<Map<String, Object>>) params.get("crossChainAssetList");
            System.out.println("crossChainAssetList size: " + list.size());
            Map<String, Map<String, Object>> dataMap = new HashMap<>();
            for(Map<String, Object> assetMap : list) {
                String key = assetMap.get("assetChainId").toString() + "-" + assetMap.get("assetId").toString();
                dataMap.put(key, assetMap);
            }
            System.out.println("dataMap size: " + dataMap.size());
            boolean usable;
            for(Map<String, Object> assetMap : dataMap.values()) {
                int assetChainId = Integer.parseInt(assetMap.get("assetChainId").toString());
                // When an in chain asset is registered as a cross chain asset, the cross chain module will register the asset as a cross chain asset and notify the ledger. At this time, the ledger should be ignored and the asset should not be modified as a cross chain asset
                if (assetType == 3 && chainId == assetChainId) {
                    continue;
                }
                usable = (boolean) assetMap.get("usable");
                if (usable) {
                    io.nuls.ledger.model.po.LedgerAsset asset = new io.nuls.ledger.model.po.LedgerAsset();
                    assetMap.put("chainId", assetMap.get("assetChainId"));
                    asset.map2pojo(assetMap, assetType);
                    saveAssetList.add(asset);
                } else {
                    deleteAssetKeyList.add(assetMap.get("assetChainId").toString() + LedgerConstant.DOWN_LINE + assetMap.get("assetId").toString());
                }
            }
            for (io.nuls.ledger.model.po.LedgerAsset asset : saveAssetList) {
                System.out.println(JSONUtils.obj2json(asset));
            }
            for (String asset : deleteAssetKeyList) {
                System.out.println(asset);
            }
            rtMap.put("value", true);
        } catch (Exception e) {
            LoggerUtil.COMMON_LOG.error(e);
            rtMap.put("value", false);
        }
    }
}
